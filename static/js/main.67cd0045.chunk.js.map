{"version":3,"sources":["components/Header.jsx","components/Task.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","className","Component","ToDoList","state","task","tasks","isDone","taskDone","changeHandler","e","setState","target","value","ClickHandler","console","log","push","forceUpdate","isDoneHandler","event","classList","toggle","document","getElementsByClassName","length","delToDo","id","splice","action","required","type","onChange","this","placeholder","onClick","style","animation","animations","bounceIn","border","map","v","i","key","fadeInUp","charAt","toUpperCase","slice","colSpan","App","Task","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qOAeeA,EAbf,iLAEI,OACE,yBAAKC,UAAU,+BACb,yBAAKA,UAAU,qDACb,uBAAGA,UAAU,4BAAb,YACA,uBAAGA,UAAU,2BAAb,kBANV,GAA4BC,a,eCgHbC,EA/Gf,2MACEC,MAAQ,CAAEC,KAAM,GAAIC,MAAO,GAAIC,QAAQ,EAAOC,SAAU,GAD1D,EAIEC,cAAgB,SAAAC,GAAC,OAAI,EAAKC,SAAS,CAAEN,KAAMK,EAAEE,OAAOC,SAJtD,EAOEC,aAAe,SAAAJ,GAEb,GADAK,QAAQC,IAAI,gBACY,KAApB,EAAKZ,MAAMC,KACb,OAAO,KAEP,EAAKD,MAAME,MAAMW,KAAK,EAAKb,MAAMC,MACjC,EAAKM,SAAS,CAAEN,KAAM,KACtB,EAAKa,eAdX,EAmBEC,cAAgB,SAAAC,GACEA,EAAMR,OACdS,UAAUC,OAAO,WAEzB,EAAKX,SAAS,CACZH,SAAUe,SAASC,uBAAuB,WAAWC,UAxB3D,EA6BEC,QAAU,SAAAC,GACR,EAAKvB,MAAME,MAAMsB,OAAOD,EAAI,GAC5B,EAAKT,eA/BT,wEAkCY,IAAD,OACP,OACE,yBAAKjB,UAAU,8BACb,0BAAM4B,OAAO,GAAG5B,UAAU,4CACxB,2BACE6B,UAAQ,EACRC,KAAK,OACLC,SAAUC,KAAKxB,cACfI,MAAOoB,KAAK7B,MAAMC,KAClBJ,UAAU,yBACViC,YAAY,2BAEd,4BACEjC,UAAU,kBACV8B,KAAK,SACLI,QAASF,KAAKnB,cAHhB,QAQDmB,KAAK7B,MAAME,MAAMmB,OAAS,EACzB,uBACExB,UAAU,qCACVmC,MAAO,CAAEC,UAAWC,aAAWC,WAE9BN,KAAK7B,MAAME,MAAMmB,OAASQ,KAAK7B,MAAMI,SAJxC,oBAImE,IAChEyB,KAAK7B,MAAME,MAAMmB,OALpB,UAQA,uBAAGxB,UAAU,6BAAb,0CAIF,yBAAKA,UAAU,oCACb,2BAAOuC,OAAO,IAAIvC,UAAU,qBAC1B,+BACGgC,KAAK7B,MAAME,MAAMmC,KAAI,SAACC,EAAGC,GAAJ,OACpB,wBACEC,IAAK,IAAMD,EACX1C,UAAU,cACVmC,MAAO,CACLC,UAAWC,aAAWO,WAGxB,wBAAI5C,UAAU,qBAAqB0C,EAAI,EAAvC,KACA,wBAAI1C,UAAU,gBAAgBkC,QAAS,EAAKhB,eACzCuB,EAAEI,OAAO,GAAGC,cAAgBL,EAAEM,MAAM,IAEvC,wBAAI/C,UAAU,sBACZ,4BACE0B,GAAIgB,EACJR,QAAS,SAAAzB,GAAC,OAAI,EAAKgB,QAAQhB,EAAEE,OAAOe,KACpC1B,UAAU,kBAHZ,aAULgC,KAAK7B,MAAME,MAAMmB,OAAS,EACzB,4BACE,wBACEwB,QAAQ,IACRhD,UAAU,oEAFZ,mCAOA,aAtGlB,GAA8BC,aCYfgD,EAXf,iLAEI,OACE,6BACE,kBAAC,EAAD,MACA,kBAACC,EAAD,WALR,GAAyBjD,aCQLkD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASnC,SAASoC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.67cd0045.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nexport class Header extends Component {\n  render() {\n    return (\n      <div className=\"bg-dark container jumbotron\">\n        <div className=\"d-flex justify-content-between align-items-center\">\n          <p className=\"text-white h3 p-2 border\">Todo App</p>\n          <p className=\" border border-dark p-2\">by Saood</p>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Header;\n","import React, { Component } from \"react\";\nimport { animations } from \"react-animation\";\n\nexport class ToDoList extends Component {\n  state = { task: \"\", tasks: [], isDone: false, taskDone: 0 };\n\n  //grabbing task from user input\n  changeHandler = e => this.setState({ task: e.target.value });\n\n  //storing task and pushing in tasks array\n  ClickHandler = e => {\n    console.log(\"i am clicked\");\n    if (this.state.task === \"\") {\n      return null;\n    } else {\n      this.state.tasks.push(this.state.task);\n      this.setState({ task: \"\" });\n      this.forceUpdate();\n    }\n  };\n\n  // strike through line\n  isDoneHandler = event => {\n    const element = event.target;\n    element.classList.toggle(\"is-done\");\n    // remaining task handler\n    this.setState({\n      taskDone: document.getElementsByClassName(\"is-done\").length\n    });\n  };\n\n  // delete the task\n  delToDo = id => {\n    this.state.tasks.splice(id, 1);\n    this.forceUpdate();\n  };\n\n  render() {\n    return (\n      <div className=\"container text-center mt-2\">\n        <form action=\"\" className=\"form-group d-flex justify-content-center\">\n          <input\n            required\n            type=\"text\"\n            onChange={this.changeHandler}\n            value={this.state.task}\n            className=\"form-control w-50 mr-1\"\n            placeholder=\"Type your task here...\"\n          />\n          <button\n            className=\"btn btn-success\"\n            type=\"button\"\n            onClick={this.ClickHandler}\n          >\n            Add\n          </button>\n        </form>\n        {this.state.tasks.length > 0 ? (\n          <p\n            className=\"bg-dark p-3 text-white w-50 m-auto\"\n            style={{ animation: animations.bounceIn }}\n          >\n            {this.state.tasks.length - this.state.taskDone} remaining out of{\" \"}\n            {this.state.tasks.length} tasks\n          </p>\n        ) : (\n          <p className=\"bg-light p-3 No-task-text\">\n            No task found. Please add some task...\n          </p>\n        )}\n        <div className=\"text-decoration-none text-center\">\n          <table border=\"0\" className=\"table w-50 m-auto\">\n            <tbody>\n              {this.state.tasks.map((v, i) => (\n                <tr\n                  key={\"c\" + i}\n                  className=\"single-task\"\n                  style={{\n                    animation: animations.fadeInUp\n                  }}\n                >\n                  <td className=\"p-3 text-left sno\">{i + 1}.</td>\n                  <td className=\"p-3 text-left\" onClick={this.isDoneHandler}>\n                    {v.charAt(0).toUpperCase() + v.slice(1)}\n                  </td>\n                  <td className=\"p-3 text-right sno\">\n                    <button\n                      id={i}\n                      onClick={e => this.delToDo(e.target.id)}\n                      className=\"btn btn-danger\"\n                    >\n                      &times;\n                    </button>\n                  </td>\n                </tr>\n              ))}\n              {this.state.tasks.length > 0 ? (\n                <tr>\n                  <td\n                    colSpan=\"3\"\n                    className=\"text-muted font-weight-light font-italic mark-complete-text p-0 \"\n                  >\n                    Click on task to mark complete\n                  </td>\n                </tr>\n              ) : null}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ToDoList;\n","import React, { Component } from \"react\";\nimport Header from \"./components/Header\";\nimport \"./App.css\";\nimport Task from \"./components/Task\";\nexport class App extends Component {\n  render() {\n    return (\n      <div>\n        <Header />\n        <Task />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}